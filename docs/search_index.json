[
["index.html", "Database Notes Note to Readers", " Database Notes Susan Chen 1.25.21 Note to Readers These are my own notes that I wrote while taking Database at NYUSH with Professor Xu in Spring 2021. Hope my notes can be of benefit to you. Reading guide KEY TERMS - definition here more details about term in the bullet points Examples go here These blocks point out other relevant info or big ideas. "],
["course-outline.html", "Course Outline", " Course Outline Week 1: Chapter 1 - Introduction Chapter 7 - Entity Relationship Model Week 2: Chapter 2 - Relational Model Chapter 7 - ER and Relational Models Week 3-5: Chapter 3 - SQL Week 6: Chapter 4 - Intermediate SQL Week 7: Midterm Review Week 8: Chapter 5 - Advanced SQL "],
["intro.html", "1 Introduction Overview 1.1 Database System Applications 1.2 Purpose of Database System 1.3 View of Data 1.4 Database Languages 1.5 Database Design 1.6 Database Engine 1.7 Database &amp; Application Architecture 1.8 Database Users and Administrators", " 1 Introduction Overview DATABASE MANAGEMENT SYSTEM (DBMS) - collection of interrelated data and a set of programs to access those data goal is to store and retrieve database info. conveniently and efficiently DATABASE - the collection of data that contains info. relevant to the enterprise 1.1 Database System Applications DSMS are used to manage collections of data that are: highly valuable relatively large and accessed by multiple users and applications at once DBMs uses ABSTRACTION to manage the COMPLEXITY of a data collection abstraction allows an user to use a complex device/system w/o having to know the details of how the system/device is constructed Some Example Applications human resources - info. about employees, salaries, payroll taxes, benefits and for generation of paychecks Credit Card Transactions Airlines were among the first to use databases in a geographically distributed manner for reservations and schedule info. Web-based services such as social media, online retailers, online advertisements Document-based for maintaining articles, patents, publications Navigation systems 1.2 Purpose of Database System FILE PROCESSING SYSTEM- is supported by a conventional operation system; stores permanent records in various files and needs different applications programs to extract records from, and add records to the appropriate files Many disadvantages of a file processing system: DATA REDUNDANCY AND INCONSISTENCY- due to different files with different structures and written in different languages by programmers over time DIFFICULTLY ACCESSING DATA - b/c conventional file-processing do NOT allow data to be retrieved in an efficient manner DATA ISOLATION - must write a new application program to retrieve data scattered in various formatted files INTEGRITY PROBLEMS - not being able to satisfy consistency constraints Ex. not being able to the program to enforce new constraints ATOMICITY PROBLEMS - changes must be atomic (it must happen in its entirety or not at all) Ex. a bank transfer from account A to B. A credit and a debit must occur, not just one CONCURRENT-ACCESS ANOMALITIES - when 2 user change the data and both changes are updated leading to 2 different results and supervision is DIFFICULT These difficulties prompted the transitions from file-based apps. to database systems in the 1960s and 1970s 1.3 View of Data major purpose of a database is to provide and ABSTRACT view of data while hiding the details of how data are stored and maintained DATA MODELS - the underlying structure of a database; a collection of conceptual tools, data relationships, data semantics, and consistency constraints all data can be classified into 4 categories: RELATIONAL MODELS, ENTITY RELATIONAL MODEL, SEMI-STRUCTURED DATA MODEL, OBJECT-BASED MODEL \\[\\\\[.1cm]\\] RELATIONAL MODEL- uses a colletion of tables to represent both the data and the relationships among those data Tables are also called relations and each table has multiple columns with unique names ENTITY-RELATIONAL (ER) MODEL - uses a collection of basic objects called ENTITIES and RELATIONSHIPS among those objects SEMI-STRUCTURED DATA MODEL - permits specification of data where individual data items of the same type may have different attributes data items in the models above must have the same set of attributes most widely used semi-structured data representations are JSON and extensible markup language (XML) \\[\\\\[.1cm]\\] OBJECT-BASED DATA MODELS - extends the relational model w/notions of encapsulation, methods, and object identity DATA ABSTRACTION- hiding the complexity of the system from users to simplify their interaction w/the system 3 levels of abstractions: Levels of Abstraction - `VIEW LEVEL`- the highgest level of abstraction that only describes the part of the database; exist to simplify interaction w/the system and the system may provide multiple views for the same database - `LOGICAL LEVEL` - describes the entire databse in terms of a small number of relatively simple structures - `PHYSICAL LEVEL` - the lowest level of abstration that describes how the data is stored in detail Users at the logical level does not need to be aware of the complex physical structure involved (a.k.a physical data independence). Database adminstrators who decide on what info. to keep uses this level SCHEMA - the overall design of the database physical schema -&gt; the design at the physical level logical schema -&gt; the design at the logical level subschema -&gt; the design at the view level logical schema most important b/c programmers use this schema to construct applications applications exhibit PHYSICAL DATA INDEPENDENCE if they do not depend on the physical schema 1.4 Database Languages a DBMS provides a data-definition language (DDL) to specify the database schema and a data-manipulation language (DML) to express database queries and update in practice DDL and DML are parts of a single database language such as SQL and almost all relational models use SQL \\[\\\\[.1cm]\\] DATA STORAGE AND DEFINITION - a set of statements in a special type of DDL that is used to specify the storage structure an access method these statements define the schemas implementation and are hidden from users DDL also provides facalities to specify integrity constraints \\[\\\\[.1cm]\\] Some Constraints: Domain Constraints - limits an attribute to a domain of possible values it can take on Ex. integer types, character types, date/time types Referential Integrity - ensuring that a value that occurs in one relation for a given set of attributes also appears in another set of attribute fro another relation Ex. a department listed for a course must actually exist in the university Authorization -limits access among types of user - Read authorization - can only read - Insert authorization - insert new data but not change - Update authorization - allows modification but not deletions - Delete authorization - allows deletion User may have all, some, or none of these authorizations DATA DICTIONARY - the output of DDL statements that contaion metedata, or data about the data can only be accessed and updated by the database system and not a regular user \\[\\\\[.1cm]\\] DATA-MANIPULATION LANGUAGE - enables user to access or manipulate data accessed by the appropriate data model types of access are retrival, insertion, deletion, manipulation 2 types of DML: PROCEDURAL and DECLARATIVE \\[\\\\[.1cm]\\] PROCEDURAL DMLs- user must specify what data to get and how to get it DECLARATIVE (NONPROCEDURAL) - user must specify what data to get but not how the database system will fiqure out an efficient way of retrieving the data \\[\\\\[.1cm]\\] QUERY - statement requesting retrival of info. and query language is the part of the DML that involves this info. retrieval technically incorrect, but DML and queary lang. is often used interchangeably most common query language is SQL (a nonprocedural lang.) \\[\\\\[.1cm]\\] APPLICATION PROGRAMS - programs that use a host lang. such as C/C++, Java, or Python with embedded SQL queries to interact w/ the database Open Database Connectivity (ODBC) standards define interfaces for C and other languages Java Database Connectivity (JDBC) standards define interface fro Java lang. 1.5 Database Design Mainly involves the design of the database schema Conceptual Design - provides a detailed overview of the enterprise confirms all requirements are met and are not in conflict w/each other Normalization - one of the 2 main ways on how to group attributes from various tables - normaliztion employs a set of algorithms that takes as inputs the set of all attributes and generates a set of table - the other way is to use the Entity Relational Model SPECIFICATION OF FUNCTIONAL REQUIREMENTS - describes the kind of operations that will be performed on the data \\[\\\\[.1cm]\\] LOGICAL DESIGN PHASE - the designer maps the high level conceptual schema onto the implementation data model of the database system that will be used PHYSICAL DESIGN PHASE - where physical feature of the database are specified 1.6 Database Engine a database system is divided into modules that deal w/a part of the system Functional components of the system can be divided into the storage manager, the quesry processor, and transcation management STORAGE MANAGER - storing, retrieving, &amp; updating data in the database includes the authorization and integrity manager, transaction manager, file manager, and buffer manager also implements several data structures as part of the physical system implementation: data files, data dictionary, indices \\[\\\\[.1cm]\\] QUERY PROCESSOR - includes DDL interpreter, DML compiler, and query evaluation engine compiler translate queries into an evalution plan of low-level instructions that can be understood by the evaluation engine compiler also performs QUERY OPTIMIZATION to pick the lowest cost evaluation plan TRANSACTION MANAGER- consist of the concurrency-control manager and the recovery manager concurrency-control manager ensures consistency of the database recovery manager ensures durability and atomicity of the database system itself &amp; can perform failure recovery to restore database to state prior to crash/failure 1.7 Database &amp; Application Architecture Applications that use databases as their backend can be partitioned into 2 or 3 tier parts 2-TIER APPLICATIONS - application resides at the client machine, and invokes database system fuctionality at the server machine via query lang. statements usually in older applications 3-TIER ARCHITECTURE - client machine acts as front end and does not contain any direct database calls; instead front end communicates with an application server and server than communicates with the database system to access data web browsers and mobile apps are the most commonly used application clients better security and performance than 2-tier 2 tier vs 3 tier 1.8 Database Users and Administrators Users are defined by the way they are expected to interact w/the system DATABASE ADMINISTRATOR (DBA) - the person who has central control over the system and performs: schema definitions storage structure and access method definition schema &amp; physical-organizational modification granting of authorization for data access routine maintenance "],
["introduction-to-the-relational-model.html", "2 Introduction to the Relational Model 2.1 Structure of the Relational Databases 2.2 Database Schema 2.3 EXCLUDED 2.4 Schema Diagrams 2.5 Relational Query Language 2.6 Relational Algebra", " 2 Introduction to the Relational Model The relational model is the primary model for commerical data processing applications. 2.1 Structure of the Relational Databases A relational database consits of tables generally, a row in a table represents a relationship among a set of values RELATION - a table TUPLE - a row ATTRIBUTE - a column in a table RELATIONAL INSTANCE - refers to a specific instance of a relation, or a specific set of rows ordered or unordered does NOT matter as long as the same relations are in the set \\[\\\\[.1cm]\\] g. DOMAIN - set of permitted values for an attribute of a relation Ex. the domain of salary attribute of the instructor relation is the set of all possible salaries. NULL VALUES - signifies that a value is UNKNOWN or does not exist best not to have null values as they will cause difficulties updating &amp; accessing database 2.2 Database Schema DATABASE SCHEMA - the logical design of the database DATABASE INSTANCE - snapshot of the data in the database at a given time RELATIONAL SCHEMA - list of attributes &amp; their corresponding domains relational instance - the value of a variable at a given time –&gt; may change relational schema does not change relational instance and schema are often used interchageably Ex. instructor may mean instructor schema or instructor instance!!! 2.3 EXCLUDED 2.4 Schema Diagrams SCHEMA DIAGRAM - depicts a database schema, all the keys, etc. relations are represented by BOXES w/name on top and attributes listed inside the box primary keys are UNDERLINED foreign key constraints are ARROWS from foreign key attribute of referencing relation to the primary key of the referenced table referential integrity constraints are TWO-HEADED ARROWS Example of a Schema Diagram 2.5 Relational Query Language QUERY LANG. - a language in which a user request info. from database IMPERATIVE QUERY LANG. - user instructs the system to perform a specific sequence of operations on the database to compute the desired results FUNCTIONAL QUERY LANG. - the computation is expressed as the evaluation of functions that may operate on the data or results of other functions DECLARATIVE QUERY LANG. - user describes the desired info. w/o giving a specific instructions or function calls for obtaining the info. desired info. is usually expressed in some form of mathematical logic Usually query lang. such as SQL have elements of all 3 approaches. 2.6 Relational Algebra RELATIONAL ALGEBRA - set of operations that take one or two relations as input &amp; produce a new relation unary operations - operate on ONE relation Ex. select, project, &amp; rename operations binary operations - operate on a pair of relations Ex. cartesian product, union, set-difference Binary and unary operations can be combined in relational algebra expressions. \\[\\\\[.1cm]\\] SELECT - choose rows that satisfy a given predicate denoted by \\(\\sigma\\) &amp; predicate as a subscript to \\(\\sigma\\) relation is in parenthese after \\(\\sigma\\) Ex. \\(\\sigma\\)dept_name=‘physics’ (instructors) selects rows of instructor table where instructor is in the Physics department selection allows mathematical operators Ex. \\(\\sigma\\)salary&gt;90000 (instructors) selction allow connectives (and, or, not) selection allows comparison btw 2 attributes Ex. \\(\\sigma\\)dept_name=‘building’ (instructors) finds all departments whose name is the same as their building \\[\\\\[.1cm]\\] PROJECT - returns a table w/certain attributes left out denoted by \\(\\Pi\\) desired attributes are listed in subscript table argument follows in parenthese Ex. \\(\\Pi\\)ID,name,salary (instructors) project allows operations Ex. \\(\\Pi\\)ID,name,salary/12 (instructors) returns monthly salary \\[\\\\[.1cm]\\] CARTESIAN-PRODUCT - combines info. from 2 tables denoted by X, a cross \\[\\\\[.1cm]\\] UNION - all rows that appear in either or both of 2 tables denoted by U, union symbol Ex. \\(\\Pi\\)course_ID (\\(\\sigma\\)semester=‘Fall’^year=2017(Section)) U \\(\\Pi\\)course_ID (\\(\\sigma\\)semester=‘Spring’^year=2018(Section)) retunn all the courses taught in Fall 2017, Spring 2018, or both For union to work: both tables must have teh same arity (# of attributes) if attributes have associated types, they must be the same for both tables If 1 &amp; 2 are satisfy, we call the tables compatible relations. INTERSECTION - find rows in both tables SET-DIFFERENCES - find rows in one table but are not in another denoted by - Ex. \\(\\Pi\\)course_ID (\\(\\sigma\\)semester=‘Fall’^year=2017(Section)) - \\(\\Pi\\)course_ID (\\(\\sigma\\)semester=‘Spring’^year=2018(Section)) finds all courses taught in Fall 2017 but not in Spring 2018 \\[\\\\[.1cm]\\] ASSIGNMENT - works like assignment in a programming lang. denoted by backward arrow, &lt;- evaluation of an assignment does NOT result in any relation being displayed to the user instead the result is assigned to a table variable assignments are TEMPORARY; assignments to permanent tables is a database MODIFICATION Only the final line displays the result. The 2 lines before assigns query results to a temporary relation. summary: Relational Algebra Operators "],
["introduction-to-sql.html", "3 Introduction to SQL 3.1 Overview of the original version of SQL 3.2 SQL Data Defintion 3.3 Basic structure of SQL queries 3.4 Additional Basic Operations 3.5 Set Operations 3.6 Null Values 3.7 Aggregate Functions 3.8 Nested Subqueries 3.9 Modification of the Databases", " 3 Introduction to SQL 3.1 Overview of the original version of SQL IBM originally developed SQL, then called Sequel, in 1970s in 1986 - American National Standards Institute (ANSI) &amp; International Organization for Standarization (ISO) published an SQL standard called SQL-86 followed by SQL-89, SQL-92, SQL:1999, SQL:2003, SQL:2006, SQL:2008, SQL:2011, &amp; most recently SQL:2016 \\[\\\\[.1cm]\\] SQL has several parts: DDL - commands for defining, deleting, &amp; modifying relation schemas DML - provides ability to query info. from database, &amp; to insert, delete, &amp; modify tuples Integrity - commands for specfying integrity constraints that the data must satisfy View definitions - SQL DDL has commands fro defining views Transactions - commands for specfying beginning &amp; end of transactions Embedded SQL &amp; dynamics SQL - defines how SQL can be embedded w/general programming languages Authorizations - SQL DDL includes commands for specifying access rights to views and relations 3.2 SQL Data Defintion SQL buit-in types: char(n) - n length character string varchar(n) - n maximum length varying character string int/integer - finite subset of integer smallint - a small integer numeric(p, d) - a fixed point number w/user-specified precision; p is the number of digits &amp; d is the number of digits after the decimal point Ex. numeric(3,1) can store 44.5 but NOT 444.5 real, double - floating point &amp; double precision floating numbers float(n) - floating number w/at least n digits nvarchar - stores multilingual data When comparing a char type to a varchar type, spaces will be added DEPENDING on the database. Thus a comparision of A (char type) = A (varchar type) may return false, so ALWAYS use varchar. \\[\\\\[.1cm]\\] create table - command to create a relation general form is where r = name of table, Ai = attribute, &amp; Di = domain of attribute, type of attribute, &amp; constraints \\[\\\\[.1cm]\\] Query Examples \\[\\\\[.1cm]\\] drop table r - deletes all info. about table r and removes it from the database delete from r - deletes all the rows in table r but does NOT delete it from the database alter table r add A D - adds atribute A of type D to an existing table r &amp; assigns it null values (the default) alter table r drop A - drop attribute A from table r many database systems do NOT allow attributes to be dropped despite allowing tables to be dropped 3.3 Basic structure of SQL queries Basic structure consists of 3 clauses SELECT, FROM, $ WHERE SELECT allows duplicates in results use SELECT DISTINCT to remove duplicates use SELECT ALL to explicitly specify duplicates are NOT removed SELECT also allows arthmetic expressions w/+, -, *, &amp; / \\[\\\\[.1cm]\\] WHERE - specify the requirement/predicate involving attributes allows logical connectiveness AND, OR, &amp; NOT operands can be expressions w/comparsion operators &lt;, &lt;=, &gt;, &gt;=, =, &amp; &lt;&gt; \\[\\\\[.1cm]\\] General meaning of a SQL query: generate a cartesian product of the tables listed in the FROM clause apply the predicates specified in the WHERE clause on the result of step 1 for each row in teh result of step 2, output the attributes specified in the SELECT clause This is NOT how SQL queries are executed. A real implementation would only generate elements of the cartesion product that satisfy the where clause predicates. 3.4 Additional Basic Operations as clause - used to rename the attributes of a resulting relation can be used w/select &amp; from clause \\[\\\\[.1cm]\\] correlation name - an identifier that is used to rename a relation a.k.a table alias, correlation variable, tuple variable \\[\\\\[.1cm]\\] String Operators: upper(s) - makes string ‘s’ all uppercase lower(s) - converts string ‘s’ to all lowercase trim(s) - removes the space at the end like - operator used for pattern matching \\[\\\\[.1cm]\\] like - used to express patterns there are 2 special characters for describing patterns: % and _ % matches any substring _ matches any character patterns are case SENSITIVE ‘Intro%’ matches any string beginning w/“Intro” ‘%Comp%’ mathches any string containing “Comp” as a substring ’___’ mathces any string w/exactly 3 characters ’___%’ - matches any string of at least 3 characters Ex. &quot;Find all the names of all departments whose building names includes the substring &#39;Watons&#39;. SELECT dept_name FROM department WHERE building like &#39;%Watson%&#39; \\[\\\\[.1cm]\\] escape keyword - used immediately before % and _ to indicate that it is to be treated like a normal character Ex. 1. like &#39;ab\\%cd%&#39;escape&#39;\\&#39; matches all strings beginning w/&quot;ab%cd&quot; 2. like &#39;ab\\\\cd%&#39;escape&#39;\\&#39; matches all strings beginning w/&quot;ab\\cd&quot; not like - used to search for mismatches * (asterisk) - used w/select clause to mean all attributes order by - causes the tuples in the result of a query to appear in a sorted order default is in ascending order so use desc for descending order can be used on multiple attributes Ex. SELECT * FROM instructor ORDER BY salary desc, name asc; \\[\\\\[.1cm]\\] between - a comparison operator to simplify the where clause that specify that value is less than or equal to a value and greater than or equal to some value Ex. Write this: SELECT name FROM instructor WHERE salary between 90000 and 100000; Instead of this: SELECT name FROM instructor WHERE salary &lt;= 100000 and salary &gt;= 90000; \\[\\\\[.1cm]\\] ROW CONSTRUCTOR - allows comparison operators to be used on tuples; (\\(a\\)1, \\(a\\)2) &lt;= (\\(b\\)1, \\(b\\)2) is true if \\(a\\)1 &lt;= \\(b\\)1 &amp; \\(a\\)2 &lt;= \\(b\\)2 Ex. Write this: SELECT name, course_id FROM instructor, teaches WHERE (instructor.ID, dept_name) = (teaches.ID, &#39;Biology&#39;) Instead of this: SELECT name, course_id FROM instructor, teaches WHERE instructor.ID = teaches.ID and dept_name = &#39;Biology&#39;; 3.5 Set Operations union - automatically remove duplicates use UNION ALL to retain all duplicates \\[\\\\[.1cm]\\] intersect - tuple in common btw 2 tables; automatically remove duplicates use INTERSECT ALL to retain all duplicates _ INTERSECT ALL returns the minimum number of duplicates in the 2 tables Ex. So if 4 sections of ICP 101 were taught in Fall 2017 and 2 sections taught in Spring 2018, then there would be 2 tuples with ICP 101 in the resulting table \\[\\\\[.1cm]\\] except - outputs all tuples from the first table that is not in the second table; perfroms set difference use EXCEPT ALL to retain duplicates EXCEPT ALL returns the number of duplicates in table 1 minus the number of duplicates in table 2 if the difference is POSITIVE. 3.6 Null Values NULL VALUES - presents problems for arithmetic operations, comparisons, and set operations the result of any arithmetic expressions (+, -, *, or /) is null if any of the input values is null the result of any comparison w/null values is unknown boolean operators are extended to deal w/unknowns and: result of true and unknown is unknown false and unknown is false unknown and unknown is unknown or: true or unknown is true false or unknown is unknown unknown or unknown is unknown not: result of not unknown is unknown \\[\\\\[.1cm]\\] null - a special keyword that can be used in the where clause to test for null values Ex. WHERE salary is null Alternatively, WHERE salary is not null -&gt; will select not null values \\[\\\\[.1cm]\\] is unknown - another special keyword to test whether the result of a comparison is unknown Ex. WHERE salary &gt; 100000 is unknown Alternatively, WHERE salary &gt; 100000 is not unknown unknown &amp; not unknown are not supported by several databases 3.7 Aggregate Functions aggregate functions take a collection of (a set or multiset) of values as input &amp; returns a single value SQL offers 5 standard built-in functions avg -&gt; average min -&gt; minimum max -&gt; maximum sum -&gt; total count -&gt; count sum &amp; avg must have numeric inputs, other functions can operate on nonnumeric datatypes \\[\\\\[.1cm]\\] GROUP BY - forms groups using specified attribute(s) Ex. SELECT dept_name, avg(salary) as avg_salary FROM instructors GROUP BY dept_name; \\[\\\\[.1cm]\\] HAVING clause - applies conditions to each group rather than on a single row Ex. SELECT dept_name, avg(salary) as avg_salary FROM instructors GROUP BY dept_name HAVING avg(salary) &gt; 42000; sequence of operations for queries w/group by &amp; having clauses: FROM is evaluated first if present, WHERE is applied on the resulting table of the from clause rows satisfying the WHERE clause are placed into groups in the GROUP BY clause if present, HAVING clause is applied to each group &amp; groups that do not satisfy the HAVING clause are removed SELECT generates a single tuple for each group by applying the aggregate function all aggregate functions except count(*) ignore null in their inputs the count of an empty set is 0, while the result of other functions is null 3.8 Nested Subqueries subquery - a SELECT-FROM-WHERE expression that is nested within another query correlated subquery - a subquery that uses a correlation name from an outer query 3.9 Modification of the Databases delete - used to remove whole tuples only delete cannot remove attributes, must be the entire row written as: DELETE FROM r WHERE p; p is the predicate &amp; r is the relation delete first finds all tuples, t in r for which p(t) is true and then deletes it from r WHERE can be omitted, in which all rows in r are deleted delete can only operate on one relation if all rows are deleted, the table still exists but is EMPTY \\[\\\\[.1cm]\\] INSERT - allows us to add a single tuple or a set of tuples into a relation tuples inserted must have the correct num. of attributes UPDATE - can change a value in a tuple w/o changing all values CASE - allows us to perform multiple updates in a single UPDATE statement, thereby avoiding the problem w/the order of tuples Ex. general form: UPDATE table SET attribute = CASE WHEN pred1 then result1 WHEN pred2 then result2 ... WHEN predN then resultN else result0 end "],
["intermediate-sql.html", "4 Intermediate SQL 4.1 Example one 4.2 Example two", " 4 Intermediate SQL Some significant applications are demonstrated in this chapter. 4.1 Example one 4.2 Example two "],
["advanced-sql.html", "5 Advanced SQL", " 5 Advanced SQL We have finished a nice book. "],
["database-design-using-the-e-r-model.html", "6 Database Design using the E-R Model", " 6 Database Design using the E-R Model "],
["relational-database-design.html", "7 Relational Database Design 7.1 Features of a Good Relational Design 7.2 Decomposition using Functional Dependencies 7.3 Normal Forms", " 7 Relational Database Design 7.1 Features of a Good Relational Design Loss of info. due to a bad Decomposition \\[\\\\[.1cm]\\] LOSSY DECOMPOSITION - a bad decompositon LOSELESS DECOMPOSITION- no loss of info. by replacing a relation R w/2 relations R1 &amp; R2 for a lossy decomposition, we would get a superset of the original relation \\[\\\\[.1cm]\\] NORMILIZATION - goal is to generate a set of tables that allow us to store info. w/o unnecessary redunancy, &amp; yet allows us to retrieve info. easily General steps: Decide if a table is in “GOOD FORM” If NOT, decompose it into a num. of smaller relational schemas in a normal form 7.2 Decomposition using Functional Dependencies LEGAL INSTANCE - of a relation is one that satifies all real-world constraints Ex. students &amp; instructors at a university must have an unqiue ID 7.3 Normal Forms NORMILIZATION - a technique of orgainizing data in a database by decomposing tables to eliminate redunancy, &amp; undesirable characteristics (insertion/update/deletion anomalities) the process takes large tables, divides them into smaller tables, and link them using relationships proposed by Edgar Codd, inventor of the relational model \\[\\\\[.1cm]\\] All the normal forms: 1NF - ensure atomic and unique values 2NF - removes partial dependencies 3NF - remove transitive dependencies BCNF/3.5NF 4NF - remove multi-valued dependencies 5NF - remove join dependencies 6NF - not standarized \\[\\\\[.1cm]\\] 1NF rules: each cell contain a single value each entry is unqiue \\[\\\\[.1cm]\\] 2NF rules: be in 1NF have a single column primary key Primary Key - a single column value used to identify an entry uniquely cannot be NULL must be UNIQUE should rarely be changed must be given a new value when a NEW entry is inserted Composite Key - key composed of multiple columns to uniquely identify an entry \\[\\\\[.1cm]\\] 3NF rules: best for most pratical applications be in 2NF have no transitive functional dependencies Transitive functional dependencies - when changing a non-key column, might cause any of the other non-key columns to change \\[\\\\[.1cm]\\] Example of 1NF Example of 2NF &amp; 3NF \\[\\\\[.1cm]\\] BCNF: section under construction \\[\\\\[.1cm]\\] 4NF rules: be in 3NF table should not have multivalued dependencies Conditions for Multi-valued dependencies (all must be true): for a dependency A -&gt; B (for a single A), multiple values of B exist have at least 3 columns for the other 2 columns, B &amp; C, they should be independent MVD occurs due to bad database design \\[\\\\[.1cm]\\] 5NF (a.k.a PJNF or Project Join Normal Dependency) rules: be in 4NF not have Join Dependency Join Dependency - when a table can be broken down into 2 seperate tables &amp; no data is loss and when the 2 tables can be joined w/o no new entries being created Example of 5NF \\[\\\\[.1cm]\\] - from these 3 decomposed tables, info. is lost b/c we do NOT know definitive that Ford brought 72XSW from ACME since in the original table, Ford also brought 72XSW from ALWAT - thus, the orginal table does not have join dependency and is already in 5NF "]
]
