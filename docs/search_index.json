[["transactions.html", "14 Transactions 14.1 Transaction Concept 14.2 A Simple Transaction Model 14.3 Atomicity and Durability 14.4 Isolation", " 14 Transactions 14.1 Transaction Concept TRANSACTION - a unit of program execution that accesses and possibly updates various data items. usually initiated by a data-manipulation language, or programming language w/embedded database accesses transactions are grouped btw function calls, begin transaction and end transaction one transaction is every step btw the begin and end calls a transaction must execute in it entirety or not at all \\[\\\\[.1cm]\\] ATOMICITY - this ‘all-or-none’ property of transaction ISOLATION - ensuring that transactions operate properly w/o interference from concurrently executing database statements DURABILITY - ensuring that the transaction’s actions remain even after system crashes CONSISTENCY - execution of a transaction in isolation preserves the consistency of the database 14.2 A Simple Transaction Model consistency is the responsibility of the application programmer who codes the transaction atomicity and durability is handled by a component of the database called the recovery system isolation is maintained by the concurrency-control system component of a databse. isolation makes sure that concurrenct executions results in the same resulting state as the end state where all transactions were ran in a serial order, one after another \\[\\\\[.1cm]\\] types of storage: volatile storage - main memory and cache memory do not usually survive system crashes but has fast access to data non-volatiel storage - secondary and tertiary storage survives system crashes but has slower access to data stable storage - storage that replicates info. in several non-volatile disks with independent failure modes; info in stable storage is theoretically never lost \\[\\\\[.1cm]\\] for a transaction to be durable, changes need to be written to stable storage for a transaction to be atomic, log records need to be written to stable storage before any changes are made to database 14.3 Atomicity and Durability ABORTED - to halt execution of a transcation ROLLED BACK - when changes caused by an aborted transaction have been undone this is typically done by recovery system and a log first, record the identifier of the transaction performing the change; the identifier of the data item being modified; the old values; and then the new values after everything is recorded, the database is modified \\[\\\\[.1cm]\\] c.COMMITTED - a successfully execution of a transaction d.COMPENSATING TRANSACTION - the only way to undo the effects of a committed transaction - not always possible to create such a compensating transaction so usually the user writes and executes a compensating transaction \\[\\\\[.1cm]\\] a successful execution is one where the transaction enters the committed state and not the other 4 states State diagram of a transaction \\[\\\\[.1cm]\\] \\[\\\\[.1cm]\\] State diagram of a transaction 14.4 Isolation allowing multiple transactions to update data at once can cause consistency problems but concurrency has two big benefits: Improved throughput and resource utilization - the num. of transactions executed in a given time is higher and the processor and disk spends less time idle Recudes waiting time - some transactions operate on different parts of the databases and are short, so its better to let them share CPU cycles and disk accesses \\[\\\\[.1cm]\\] CONCURRENCY-CONTROL SCHEMES - variety of mechanism employed by the database system to control the interaction among concurrent transactions and to prevent them from destroying the consistency of the database individually, each transaction may be correct but when ran concurrently, they still can violated the isolation property and cause inconsistency \\[\\\\[.1cm]\\] Schedules - execution sequences that helps identify isolation-abiding transactions and database consistency "]]
